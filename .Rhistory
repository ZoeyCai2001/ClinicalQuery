output$tab <- renderUI({
paste("URL link:", url)
})
})
)
runApp(
list(ui = fluidPage(
uiOutput("tab")
),
server = function(input, output, session){
url <- a("Google Homepage", href="https://www.google.com/")
output$tab <- renderUI({
tagList("URL link:", url)
})
})
)
output$tab <- renderUI({
tagList("URL link:", url)
})
library(shiny)
runApp(
list(ui = fluidPage(
uiOutput("tab")
),
server = function(input, output, session){
url <- a("Google Homepage", href="https://www.google.com/")
output$tab <- renderUI({
tagList("URL link:", url)
})
})
)
x = studies |> head(100)
runApp('test_link.R')
runApp('test_link.R')
runApp('test_link.R')
url <- a("Google Homepage", href="https://www.google.com/")
get_studies() |>
select(nct_id, brief_title, start_date, completion_date) |>
head(1) |>
mutate(nct_id = url)
x |>
select(nct_id, brief_title, start_date, completion_date) |>
head(1) |>
mutate(nct_id = url)
runApp('test_link.R')
url <- a("Google Homepage", href="https://www.google.com/")
get_studies() |>
select(nct_id, brief_title, start_date, completion_date) |>
head(1) |>
mutate(url = url)
x |> select(nct_id, brief_title, start_date, completion_date) |>
head(1) |>
mutate(url = url)
url <- a("Google Homepage", href="https://www.google.com/")
x |> select(nct_id, brief_title, start_date, completion_date) |>
head(1)
x |> select(nct_id, brief_title, start_date, completion_date) |>
head(1) |> mutate(u = url)
x |>select(nct_id, brief_title, start_date, completion_date) |>
head(1) %>%
mutate(across(.cols = url, ~ gsub("https://", "http://", .)))
library(dplyr)
# Example data frame
df <- data.frame(id = 1:3, url = c("https://example.com", "https://example.org", "https://example.net"))
# Use across() without naming the result
df <- df %>%
mutate(across(.cols = url, ~ gsub("https://", "http://", .)))
df
? ~ gsub
?gsub
# Now the mutation is performed without naming the result
library(dplyr)
url <- a("Google Homepage", href = "https://www.google.com/")
# Create a data frame or tibble with one row
df <- tibble(
nct_id = NA,
brief_title = NA,
start_date = NA,
completion_date = NA,
url = url
)
# Now the mutation is performed without naming the result
library(dplyr)
url <- a("Google Homepage", href = "https://www.google.com/")
runApp('test_link.R')
install.packages("shiny")
data <- data.frame(
Name = c("Google", "Facebook", "Twitter"),
url = c("www.google.com", "www.facebook.com", "www.twitter.com"),
head = c("https://","https://","https://")
)
df$link <- paste0("<a href='", df$url, "' target='_blank'>", df$heading, "</a>")
ui <- fluidPage(
DT::dataTableOutput("table")
)
server <- function(input, output) {
output$table <- DT::renderDataTable({
DT::datatable(df[, "link", drop = FALSE], escape = FALSE)
})
}
shinyApp(ui, server)
library(shiny)
library(DT)
data <- data.frame(
Name = c("Google", "Facebook", "Twitter"),
url = c("www.google.com", "www.facebook.com", "www.twitter.com"),
head = c("https://","https://","https://")
)
df$link <- paste0("<a href='", df$url, "' target='_blank'>", df$heading, "</a>")
ui <- fluidPage(
DT::dataTableOutput("table")
)
server <- function(input, output) {
output$table <- DT::renderDataTable({
DT::datatable(df[, "link", drop = FALSE], escape = FALSE)
})
}
shinyApp(ui, server)
runApp('test_link.R')
data <- data.frame(
heading = c("Google", "Facebook", "Twitter"),
url = c("https://www.google.com", "https://www.facebook.com", "https://www.twitter.com")
)
df$link <- paste0("<a href='", df$url, "' target='_blank'>", df$heading, "</a>")
df
data <- data.frame(
heading = c("Google", "Facebook", "Twitter"),
url = c("https://www.google.com", "https://www.facebook.com", "https://www.twitter.com")
)
df$link <- paste0("<a href='", df$url, "' target='_blank'>", df$heading, "</a>")
df
data <- data.frame(
heading = c("Google", "Facebook", "Twitter"),
url = c("https://www.google.com", "https://www.facebook.com", "https://www.twitter.com")
)
data
df <- data.frame(
heading = c("Google", "Facebook", "Twitter"),
url = c("https://www.google.com", "https://www.facebook.com", "https://www.twitter.com")
)
df$link <- paste0("<a href='", df$url, "' target='_blank'>", df$heading, "</a>")
ui <- fluidPage(
DT::dataTableOutput("table")
)
server <- function(input, output) {
output$table <- DT::renderDataTable({
DT::datatable(df[, "link", drop = FALSE], escape = FALSE)
})
}
shinyApp(ui, server)
x = studies |> head(100)
x = x |> collect()
x$link <- paste0("<a href='", x$url, "' target='_blank'>", x$brief_title, "</a>")
DT::datatable(df[, "link", drop = FALSE], escape = FALSE)
x |>
select(link, brief_title, start_date, completion_date) |>
rename(`NCT ID` = link, `Brief Title` = brief_title,
`Start Date` = start_date, `Completion Date` = completion_date)
x = x |> collect()
x = studis |> head(100)
x = studies |> head(100)
x = x |> collect()
x$link <- paste0("<a href='", x$url, "' target='_blank'>", x$brief_title, "</a>")
x |>
select(link, brief_title, start_date, completion_date) |>
rename(`NCT ID` = link, `Brief Title` = brief_title,
`Start Date` = start_date, `Completion Date` = completion_date)
runApp('app_mid.R')
runApp('app_mid.R')
runApp('test_link.R')
runApp('app_mid.R')
x = studies |> head(100)
x = x |> collect()
x$link <- paste0("<a href='", x$url, "' target='_blank'>", x$brief_title, "</a>")
x = x |> as.data.frame()
x |>
select(link, brief_title, start_date, completion_date) |>
rename(`NCT ID` = link, `Brief Title` = brief_title,
`Start Date` = start_date, `Completion Date` = completion_date)
colnames(x)
x = x |>
select(link, brief_title, start_date, completion_date) |>
rename(`NCT ID` = link, `Brief Title` = brief_title,
`Start Date` = start_date, `Completion Date` = completion_date)
x
colnames(x)
runApp('app_mid.R')
df = as.data.frame(studies)
if (length(dbListTables(con)) == 0) {
stop("Problem reading from connection.")
}
studies = tbl(con, "studies")
sponsors = tbl(con, "sponsors")
conditions = tbl(con, "conditions")
countries = tbl(con, "countries")
links = tbl(con, "links")
countries = countries %>% rename(country = name)
x= studies |>
left_join(conditions, by = "nct_id") |>
left_join(countries, by = "nct_id") |>
left_join(links, by = "nct_id") |>
head(100)
df = as.data.frame(studies)
df = as.data.frame(x)
x= studies |>
left_join(conditions, by = "nct_id") |>
left_join(countries, by = "nct_id") |>
left_join(links, by = "nct_id") |>
head(100)
df = as.data.frame(x)
df$link <- paste0("<a href='", df$url, "' target='_blank'>", df$brief_title, "</a>")
ui <- fluidPage(
DT::dataTableOutput("table")
)
server <- function(input, output) {
output$table <- DT::renderDataTable({
DT::datatable(df[, "link", drop = FALSE], escape = FALSE)
})
}
shinyApp(ui, server)
runApp('test_link.R')
runApp('test_link.R')
x = studies |> head(100)
table_with_link = function(x){
x = x |> collect()
x$link <- paste0("<a href='", x$url, "' target='_blank'>", x$brief_title, "</a>")
x = x |> as.data.frame()
x = x |>
select(link, brief_title, start_date, completion_date) |>
rename(`NCT ID` = link, `Brief Title` = brief_title,
`Start Date` = start_date, `Completion Date` = completion_date)
}
x= studies |>
left_join(conditions, by = "nct_id") |>
left_join(countries, by = "nct_id") |>
left_join(links, by = "nct_id") |>
head(100)
df = table_with_link(x)
ui <- fluidPage(
DT::dataTableOutput("table")
)
server <- function(input, output) {
output$table <- DT::renderDataTable({
DT::datatable(df[drop = FALSE], escape = FALSE)
})
}
shinyApp(ui, server)
runApp('app_mid.R')
runApp('app_mid.R')
runApp('app_mid.R')
runApp('app_mid.R')
runApp('app_mid.R')
table_with_link = function(x){
x = x |> collect()
x$link <- paste0("<a href='", x$url, "' target='_blank'>", x$nct_id, "</a>")
x = x |> as.data.frame()
x = x |>
select(link, brief_title, start_date, completion_date) |>
rename(`NCT ID` = link, `Brief Title` = brief_title,
`Start Date` = start_date, `Completion Date` = completion_date)
}
runApp('app_mid.R')
runApp('app_mid.R')
runApp('app_mid.R')
dbListTables(con)
con$overall_officials
tbl(con, "tbl(con, "studies")")
tbl(con, "overall_officials")
tbl(con, "baseline_counts")
tbl(con, "keywords")
dbListTables(con)
tbl(con, "outcomes")
tbl(con, "conditions")
runApp('app_mid.R')
runApp('app_mid.R')
runApp('app_mid.R')
runApp('app_mid.R')
runApp('app_mid.R')
mapDevice('x11')
library(shiny); runApp('app_mid.R')
runApp('app_mid.R')
runApp('app_mid.R')
runApp('app_mid.R')
?distinct
x = x |>
select(link, brief_title, start_date, completion_date) |>
rename(`NCT ID` = link, `Brief Title` = brief_title,
`Start Date` = start_date, `Completion Date` = completion_date) %>%
distinct()
runApp('app_mid.R')
runApp('app_mid.R')
dbListTables(con)
tbl(con,"reported_events")
library(shiny); runApp('app_mid.R')
d = studies |>
query_kwds("pembrolizumab", "brief_title") |>
select(start_date, completion_date) |>
collect()
source("ct-util_mid.R")
d
ret = studies |>
query_kwds("pembrolizumab", "brief_title") |>
select(start_date, completion_date) |>
collect()
#Date Range Selection
start_date_range = c("2000-1-1","2050-12-31")
completion_date_range = c("2000-1-1","2050-12-31")
if (!is.null(input$start_date_range)) {
#Date Range Selection
start_date_range = c("2000-1-1","2050-12-31")
completion_date_range = c("2000-1-1","2050-12-31")
if (!is.null(input$start_date_range)) {
start_date <- as.Date(start_date_range[1])
end_date <- as.Date(start_date_range[2])
ret = ret |>
filter(start_date >= start_date & start_date <= end_date)
}
if (!is.null(input$completion_date_range)) {
start_date_c <- as.Date(completion_date_range[1])
end_date_c <- as.Date(completion_date_range[2])
ret = ret |>
filter(completion_date >= start_date_c & completion_date <= end_date_c)
}
ret
}
#Date Range Selection
start_date_range = c("2000-1-1","2050-12-31")
completion_date_range = c("2000-1-1","2050-12-31")
if (!is.null(input$start_date_range)) {
start_date <- as.Date(start_date_range[1])
end_date <- as.Date(start_date_range[2])
ret = ret |>
filter(start_date >= start_date & start_date <= end_date)
}
#Date Range Selection
start_date_range = c("2000-1-1","2050-12-31")
completion_date_range = c("2000-1-1","2050-12-31")
if (!is.null(start_date_range)) {
start_date <- as.Date(start_date_range[1])
end_date <- as.Date(start_date_range[2])
ret = ret |>
filter(start_date >= start_date & start_date <= end_date)
}
if (!is.null(completion_date_range)) {
start_date_c <- as.Date(completion_date_range[1])
end_date_c <- as.Date(completion_date_range[2])
ret = ret |>
filter(completion_date >= start_date_c & completion_date <= end_date_c)
}
ret
ret = studies |>
query_kwds("pembrolizumab", "brief_title") |>
select(start_date, completion_date) |>
collect()
#Date Range Selection
start_date_range = c("2000-1-1","2050-12-31")
completion_date_range = c("2000-1-1","2050-12-31")
if (!is.null(start_date_range)) {
start_date <- as.Date(start_date_range[1])
end_date <- as.Date(start_date_range[2])
ret = ret |>
filter(start_date >= start_date & start_date <= end_date)
}
if (!is.null(completion_date_range)) {
start_date_c <- as.Date(completion_date_range[1])
end_date_c <- as.Date(completion_date_range[2])
ret = ret |>
filter(completion_date >= start_date_c & completion_date <= end_date_c)
}
ret
ret = studies |>
query_kwds("pembrolizumab", "brief_title") |>
select(start_date, completion_date) |>
collect()
ret
ret = studies |>
query_kwds("pembrolizumab", "brief_title") |>
select(start_date, completion_date) |>
collect()
ret
studies
ret = studies |>
query_kwds("pembrolizumab", "brief_title") |>
collect()
#Date Range Selection
start_date_range = c("2000-1-1","2050-12-31")
completion_date_range = c("2000-1-1","2050-12-31")
if (!is.null(start_date_range)) {
start_date <- as.Date(start_date_range[1])
end_date <- as.Date(start_date_range[2])
ret = ret |>
filter(start_date >= start_date & start_date <= end_date)
}
if (!is.null(completion_date_range)) {
start_date_c <- as.Date(completion_date_range[1])
end_date_c <- as.Date(completion_date_range[2])
ret = ret |>
filter(completion_date >= start_date_c & completion_date <= end_date_c)
}
ret
ret |> getTermMatrix()
#Word Cloud
termmatrix = ret |> getTermMatrix()
wordcloud(names(termmatrix), termmatrix, scale=c(4,0.5),
min.freq = input$freq, max.words=input$max,
colors=brewer.pal(8, "Dark2"))
#Word Cloud
termmatrix = ret |> getTermMatrix()
freq = 100
max = 100
wordcloud(names(termmatrix), termmatrix, scale=c(4,0.5),
min.freq = freq, max.words=max,
colors=brewer.pal(8, "Dark2"))
library(shiny); runApp('app_mid.R')
#Word Cloud
termmatrix = ret |> getTermMatrix()
freq = 10
max = 100
wordcloud(names(termmatrix), termmatrix, scale=c(4,0.5),
min.freq = freq, max.words=max,
colors=brewer.pal(8, "Dark2"))
#Word Cloud
termmatrix = ret |> getTermMatrix()
freq = 10
max = 100
wordcloud(names(termmatrix), termmatrix, scale=c(4,0.5),
min.freq = freq, max.words=max,
colors=brewer.pal(8, "Dark2"))
#World Map
ret |> plot_countries()
ret
ret$country
#Link to Website
ret |> table_with_link()
#Link to Website
ret |> table_with_link()
source("ct-util_mid.R")
ret = studies |>
query_kwds("pembrolizumab", "brief_title") |>
collect()
#Date Range Selection
start_date_range = c("2000-1-1","2050-12-31")
completion_date_range = c("2000-1-1","2050-12-31")
if (!is.null(start_date_range)) {
start_date <- as.Date(start_date_range[1])
end_date <- as.Date(start_date_range[2])
ret = ret |>
filter(start_date >= start_date & start_date <= end_date)
}
if (!is.null(completion_date_range)) {
start_date_c <- as.Date(completion_date_range[1])
end_date_c <- as.Date(completion_date_range[2])
ret = ret |>
filter(completion_date >= start_date_c & completion_date <= end_date_c)
}
#Word Cloud
termmatrix = ret |> getTermMatrix()
freq = 10
max = 100
wordcloud(names(termmatrix), termmatrix, scale=c(4,0.5),
min.freq = freq, max.words=max,
colors=brewer.pal(8, "Dark2"))
wordcloud(names(termmatrix), termmatrix, scale=c(4,0.5),
min.freq = freq, max.words=max,
colors=brewer.pal(8, "Dark2"))
#World Map
ret |> plot_countries()
#American Map
ret |> plot_states_us()
#Top 10 Investigated Diseases
ret |> pie_chart_mesh()
#Link to Website
ret |> table_with_link()
runApp('app_mid.R')
source_class = "individual"
ret = studies |>
query_kwds("pembrolizumab", "brief_title") |>
filter(source_class == source_class) |>
collect()
ret
#Date Range Selection
start_date_range = c("2000-1-1","2050-12-31")
completion_date_range = c("2000-1-1","2050-12-31")
if (!is.null(start_date_range)) {
start_date <- as.Date(start_date_range[1])
end_date <- as.Date(start_date_range[2])
ret = ret |>
filter(start_date >= start_date & start_date <= end_date)
}
if (!is.null(completion_date_range)) {
start_date_c <- as.Date(completion_date_range[1])
end_date_c <- as.Date(completion_date_range[2])
ret = ret |>
filter(completion_date >= start_date_c & completion_date <= end_date_c)
}
#Word Cloud
termmatrix = ret |> getTermMatrix()
freq = 10
max = 100
wordcloud(names(termmatrix), termmatrix, scale=c(4,0.5),
min.freq = freq, max.words=max,
colors=brewer.pal(8, "Dark2"))
#World Map
ret |> plot_countries()
#American Map
ret |> plot_states_us()
#Top 10 Investigated Diseases
ret |> pie_chart_mesh()
#Link to Website
ret |> table_with_link()
runApp('app_mid.R')
runApp('app_mid.R')
